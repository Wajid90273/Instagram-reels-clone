{"version":3,"sources":["VideoHeader.js","VideoFooter.js","VideoCard.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["VideoHeader","className","VideoFooter","channel","song","likes","shares","avatarSrc","Avatar","src","Button","mode","index","fontsize","VideoCard","url","useState","isVideoPlaying","setIsVideoPlaying","videoRef","useRef","ref","onClick","current","pause","play","alt","loop","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","reels","setReels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a65687ef.chunk.js","sourcesContent":["import React from 'react';\nimport './VideoHeader.css';\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport CameraAltOutlinedIcon from \"@material-ui/icons/CameraAltOutlined\";\nfunction VideoHeader() {\n    return (\n        <div className='videoHeader'>\n            <ArrowBackIosIcon/>\n            <h3>Sach-Reels</h3>\n            <CameraAltOutlinedIcon/>\n        </div>\n    )\n}\n\nexport default VideoHeader\n","import React from 'react'\nimport './VideoFooter.css'\nimport { Avatar, Button } from '@material-ui/core';\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\nimport Ticker from \"react-ticker\";\nimport FavouriteIcon from '@material-ui/icons/Favorite';\nimport ModeCommentIcon from '@material-ui/icons/ModeComment';\nimport SendIcon from '@material-ui/icons/Send';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\n\n\n\nfunction VideoFooter({channel, song, likes,\n    shares,avatarSrc }) {\n    return (\n        <div className=\"videoFooter\">\n        <div className=\"videoFooter__text\">\n            <Avatar src={avatarSrc} />\n                <h3>\n                    {channel} . <Button>Follow</Button>\n                </h3>\n        </div>\n        <div className=\"videoFooter__ticker\">\n            <MusicNoteIcon\n            className =\"videoFooter__icon\"/> \n            < Ticker mode = \"smooth\">\n                {\n                    ({index})=> (\n                <>\n                  \n                    <h1>{song}</h1>   \n                    \n                </>\n                    )}\n            </Ticker>\n              \n        </div>\n        <div className=\"videoFooter__actions\">\n            <div className=\"videoFooter__actionsLeft\">\n                <FavouriteIcon fontsize=\"large\"/>\n                <ModeCommentIcon fontsize=\"large\"/>\n                <SendIcon fontsize=\"large\"/>\n                <MoreHorizIcon fontsize=\"large\"/> \n            </div>\n            <div className=\"videoFooter__actionsRight\">\n                <div className=\"videoFooter__stat\">\n                    <FavouriteIcon/>\n                    <p>{likes}</p>\n                </div>\n                <div className=\"videoFooter__stat\">\n                    <ModeCommentIcon/>\n                    <p>{shares}</p>   \n                </div>\n            </div>\n        </div>\n        </div>              \n    )\n}\n\nexport default VideoFooter\n","import React, { useRef, useState } from 'react'\nimport \"./VideoCard.css\";\nimport VideoHeader from './VideoHeader';\nimport VideoFooter from './VideoFooter';\n\nfunction VideoCard({ url, likes, shares, channel, avatarSrc, song }) {\n    const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n    const videoRef = useRef(null);\n\n    const onVideoPress = () =>{\n        if (isVideoPlaying){\n            //stop\n            videoRef.current.pause()\n            setIsVideoPlaying(false)\n        }else{\n            //play\n            videoRef.current.play()\n            setIsVideoPlaying(true)\n        }\n    }\n    //useState\n    //useRef\n    return (\n        <div className='videoCard'>\n           <VideoHeader/>\n           <video\n            ref = {videoRef}\n            onClick={onVideoPress}\n            className =\"videoCard__player\"\n            src={url}\n            alt=\"IG reel video\" \n            loop\n            />\n            <VideoHeader\n            />\n            <VideoFooter\n             channel = {channel}\n             likes = {likes}\n             shares = {shares}\n             avatarSrc = {avatarSrc}\n             song = {song} \n            />\n\n        </div>\n    )\n}\n\nexport default VideoCard\n","import firebase from \"firebase\";\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCv48Hr77S6P2LOnLDK56qLQ_-cPGO9R1E\",\n  authDomain: \"instagram-reels-clone-42d10.firebaseapp.com\",\n  projectId: \"instagram-reels-clone-42d10\",\n  storageBucket: \"instagram-reels-clone-42d10.appspot.com\",\n  messagingSenderId: \"199285730695\",\n  appId: \"1:199285730695:web:dc4c93fcd7bea9bab17722\",\n  measurementId: \"G-W5J93NG35P\"\n};\n\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\n\nexport default db;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport VideoCard from './VideoCard';\nimport db from './firebase';\n\nfunction App() {\n  const [reels, setReels] = useState([]);\n  \n  useEffect(() => {\n    //  App Component will run ONCE when it loads, and never again\n    db.collection('reels').onSnapshot(snapshot => (\n      setReels(snapshot.docs.map(doc => doc.data()))\n    )) \n  }, [])\n  \n  return (\n    <div className=\"app\">\n      <div className=\"app__top\"> \n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Instagram_logo_2016.svg/768px-Instagram_logo_2016.svg.png\" alt=\"\" className=\"app__logo\"/>\n        <h1>REELS</h1>\n      </div>\n      {/* image at the top logo     */}\n      {/* Reels Text */}\n\n      <div className=\"app__videos\">\n      {/* Container of app__videos(scrollable content) */}\n      {reels.map(({channel, avatarSrc, song, url,likes, shares}) => (\n      <VideoCard\n      channel = {channel}\n      avatarSrc = {avatarSrc}\n      song = {song}\n      url = {url}\n      likes = {likes}\n      shares = {shares}\n      />\n      ))}\n      </div>    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}